<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Examine</name>
    </assembly>
    <members>
        <member name="M:Examine.SearchResult.Equals(System.Object)">
            <summary>
            Override this method so that the Distinct() operator works
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Examine.SearchResult.GetHashCode">
            <summary>
            Override this method so that the Distinct() operator works
            </summary>
            <returns></returns>
        </member>
        <member name="P:Examine.SearchResult.Item(System.Int32)">
            <summary>
            Returns the key value pair for the index specified
            </summary>
            <param name="resultIndex"></param>
            <returns></returns>
        </member>
        <member name="P:Examine.SearchResult.Item(System.String)">
            <summary>
            Returns the value for the key specified
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Examine.ISearcher">
            <summary>
            An interface representing an Examine Searcher
            </summary>
        </member>
        <member name="M:Examine.ISearcher.Search(System.String,System.Int32,System.Boolean)">
            <summary>
            Searches the specified search text in all fields of the index
            </summary>
            <param name="searchText">The search text.</param>
            <param name="maxResults">The max number of results.</param>
            <param name="useWildcards">if set to <c>true</c> the search will use wildcards.</param>
            <returns>Search Results</returns>
        </member>
        <member name="M:Examine.ISearcher.Search(Examine.SearchCriteria.ISearchCriteria)">
            <summary>
            Searches using the specified search query parameters
            </summary>
            <param name="searchParameters">The search parameters.</param>
            <returns>Search Results</returns>
        </member>
        <member name="M:Examine.ISearcher.CreateSearchCriteria(System.Int32,Examine.IndexType)">
            <summary>
            Creates a search criteria instance as required by the implementation
            </summary>
            <param name="maxResults">The max number of results.</param>
            <param name="type">The type of data in the index.</param>
            <returns>An instance of <see cref="T:Examine.SearchCriteria.ISearchCriteria"/></returns>
        </member>
        <member name="T:Examine.IIndexer">
            <summary>
            Interface to represent an Examine Indexer
            </summary>
        </member>
        <member name="M:Examine.IIndexer.ReIndexNode(System.Xml.Linq.XElement,Examine.IndexType)">
            <summary>
            Forces a particular XML node to be reindexed
            </summary>
            <param name="node">XML node to reindex</param>
            <param name="type">Type of index to use</param>
        </member>
        <member name="M:Examine.IIndexer.DeleteFromIndex(System.Xml.Linq.XElement)">
            <summary>
            Deletes a node from the index
            </summary>
            <param name="node">Node to delete</param>
        </member>
        <member name="M:Examine.IIndexer.IndexAll(Examine.IndexType)">
            <summary>
            Re-indexes all data for the index type specified
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Examine.IIndexer.RebuildIndex">
            <summary>
            Rebuilds the entire index from scratch for all index types
            </summary>
        </member>
        <member name="P:Examine.IIndexer.IndexerData">
            <summary>
            Gets/sets the index criteria to create the index with
            </summary>
            <value>The indexer data.</value>
        </member>
        <member name="M:Examine.ExamineManager.Search(Examine.SearchCriteria.ISearchCriteria)">
            <summary>
            Uses the default provider specified to search
            </summary>
            <param name="searchParameters"></param>
            <returns></returns>
            <remarks>This is just a wrapper for the default provider</remarks>
        </member>
        <member name="M:Examine.ExamineManager.Search(System.String,System.Int32,System.Boolean)">
            <summary>
            Uses the default provider specified to search
            </summary>
            <param name="searchText"></param>
            <param name="maxResults"></param>
            <param name="useWildcards"></param>
            <returns></returns>
        </member>
        <member name="M:Examine.ExamineManager.ReIndexNode(System.Xml.Linq.XElement,Examine.IndexType,System.Collections.Generic.IEnumerable{Examine.Providers.BaseIndexProvider})">
            <summary>
            Reindex nodes for the providers specified
            </summary>
            <param name="node"></param>
            <param name="type"></param>
            <param name="providers"></param>
        </member>
        <member name="M:Examine.ExamineManager.DeleteFromIndex(System.Xml.Linq.XElement,System.Collections.Generic.IEnumerable{Examine.Providers.BaseIndexProvider})">
            <summary>
            Deletes index for node for the specified providers
            </summary>
            <param name="node"></param>
            <param name="providers"></param>
        </member>
        <member name="M:Examine.ExamineManager.ReIndexNode(System.Xml.Linq.XElement,Examine.IndexType)">
            <summary>
            Reindex nodes for all providers
            </summary>
            <param name="node"></param>
            <param name="type"></param>
        </member>
        <member name="M:Examine.ExamineManager.DeleteFromIndex(System.Xml.Linq.XElement)">
            <summary>
            Deletes index for node for all providers
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:Examine.ExamineManager.Instance">
            <summary>
            Singleton
            </summary>
        </member>
        <member name="T:Examine.IndexedNode">
            <summary>
            Simple class to store the definition of an indexed node
            </summary>
        </member>
        <member name="T:Examine.Providers.IndexProviderCollection">
            <summary>
            A collection of Examine Index Providers
            </summary>
        </member>
        <member name="M:Examine.Providers.IndexProviderCollection.Add(System.Configuration.Provider.ProviderBase)">
            <summary>
            Adds a provider to the collection.
            </summary>
            <param name="provider">The provider to be added.</param>
            <exception cref="T:System.NotSupportedException">
            The collection is read-only.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="provider"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <see cref="P:System.Configuration.Provider.ProviderBase.Name"/> of <paramref name="provider"/> is null.
            - or -
            The length of the <see cref="P:System.Configuration.Provider.ProviderBase.Name"/> of <paramref name="provider"/> is less than 1.
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/>
            </PermissionSet>
        </member>
        <member name="M:Examine.Providers.IndexProviderCollection.System#Collections#Generic#IEnumerable{Examine#Providers#BaseIndexProvider}#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Examine.Providers.IndexProviderCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an object that implements the <see cref="T:System.Collections.IEnumerator"/> interface to iterate through the collection.
            </summary>
            <returns>
            An object that implements <see cref="T:System.Collections.IEnumerator"/> to iterate through the collection.
            </returns>
        </member>
        <member name="P:Examine.Providers.IndexProviderCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Examine.Providers.BaseIndexProvider"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="P:Examine.Providers.IndexProviderCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Examine.Providers.BaseIndexProvider"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:Examine.Providers.BaseSearchProvider.Search(System.String,System.Int32,System.Boolean)">
            <summary>
            Simple search method which should default to searching content nodes
            </summary>
            <param name="searchText"></param>
            <param name="maxResults"></param>
            <param name="useWildcards"></param>
            <returns></returns>
        </member>
        <member name="M:Examine.Providers.BaseSearchProvider.CreateSearchCriteria(System.Int32,Examine.IndexType)">
            <summary>
            Creates an instance of SearchCriteria for the provider
            </summary>
            <returns>A blank SearchCriteria</returns>
        </member>
        <member name="T:Examine.Providers.BaseIndexProvider">
            <summary>
            Base class for an Examine Index Provider. You must implement this class to create an IndexProvider
            </summary>
        </member>
        <member name="M:Examine.Providers.BaseIndexProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Examine.Providers.BaseIndexProvider"/> class.
            </summary>
        </member>
        <member name="M:Examine.Providers.BaseIndexProvider.#ctor(Examine.IIndexCriteria)">
            <summary>
            Initializes a new instance of the <see cref="T:Examine.Providers.BaseIndexProvider"/> class.
            </summary>
            <param name="indexerData">The indexer data.</param>
        </member>
        <member name="M:Examine.Providers.BaseIndexProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">
            The name of the provider is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The name of the provider has a length of zero.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"/> on a provider after the provider has already been initialized.
            </exception>
        </member>
        <member name="M:Examine.Providers.BaseIndexProvider.ReIndexNode(System.Xml.Linq.XElement,Examine.IndexType)">
            <summary>
            Forces a particular XML node to be reindexed
            </summary>
            <param name="node">XML node to reindex</param>
            <param name="type">Type of index to use</param>
        </member>
        <member name="M:Examine.Providers.BaseIndexProvider.DeleteFromIndex(System.Xml.Linq.XElement)">
            <summary>
            Deletes a node from the index
            </summary>
            <param name="node">Node to delete</param>
        </member>
        <member name="M:Examine.Providers.BaseIndexProvider.IndexAll(Examine.IndexType)">
            <summary>
            Re-indexes all data for the index type specified
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Examine.Providers.BaseIndexProvider.RebuildIndex">
            <summary>
            Rebuilds the entire index from scratch for all index types
            </summary>
        </member>
        <member name="M:Examine.Providers.BaseIndexProvider.OnIgnoringNode(Examine.IndexingNodeDataEventArgs)">
            <summary>
            Called when a node is ignored by the ValidateDocument method.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Examine.Providers.BaseIndexProvider.OnIndexingError(Examine.IndexingErrorEventArgs)">
            <summary>
            Raises the <see cref="E:IndexingError"/> event.
            </summary>
            <param name="e">The <see cref="T:Examine.IndexingErrorEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Examine.Providers.BaseIndexProvider.OnNodeIndexed(Examine.IndexedNodeEventArgs)">
            <summary>
            Raises the <see cref="E:NodeIndexed"/> event.
            </summary>
            <param name="e">The <see cref="T:Examine.IndexedNodeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Examine.Providers.BaseIndexProvider.OnNodeIndexing(Examine.IndexingNodeEventArgs)">
            <summary>
            Raises the <see cref="E:NodeIndexing"/> event.
            </summary>
            <param name="e">The <see cref="T:Examine.IndexingNodeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Examine.Providers.BaseIndexProvider.OnIndexDeleted(Examine.DeleteIndexEventArgs)">
            <summary>
            Raises the <see cref="E:IndexDeleted"/> event.
            </summary>
            <param name="e">The <see cref="T:Examine.DeleteIndexEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Examine.Providers.BaseIndexProvider.OnGatheringNodeData(Examine.IndexingNodeDataEventArgs)">
            <summary>
            Raises the <see cref="E:GatheringNodeData"/> event.
            </summary>
            <param name="e">The <see cref="T:Examine.IndexingNodeDataEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Examine.Providers.BaseIndexProvider.OnGatheringFieldData(Examine.IndexingFieldDataEventArgs)">
            <summary>
            Raises the <see cref="E:GatheringFieldData"/> event.
            </summary>
            <param name="e">The <see cref="T:Examine.IndexingFieldDataEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Examine.Providers.BaseIndexProvider.OnNodesIndexed(Examine.IndexedNodesEventArgs)">
            <summary>
            Raises the <see cref="E:NodesIndexed"/> event.
            </summary>
            <param name="e">The <see cref="T:Examine.IndexedNodesEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Examine.Providers.BaseIndexProvider.OnNodesIndexing(Examine.IndexingNodesEventArgs)">
            <summary>
            Raises the <see cref="E:NodesIndexing"/> event.
            </summary>
            <param name="e">The <see cref="T:Examine.IndexingNodesEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Examine.Providers.BaseIndexProvider.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Examine.Providers.BaseIndexProvider"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Examine.Providers.BaseIndexProvider.SupportUnpublishedContent">
            <summary>
            Determines if the manager will call the indexing methods when content is saved or deleted as
            opposed to cache being updated.
            </summary>
        </member>
        <member name="P:Examine.Providers.BaseIndexProvider.IndexerData">
            <summary>
            Gets/sets the index criteria to create the index with
            </summary>
        </member>
        <member name="E:Examine.Providers.BaseIndexProvider.IndexingError">
            <summary>
            Occurs for an Indexing Error
            </summary>
        </member>
        <member name="E:Examine.Providers.BaseIndexProvider.NodeIndexing">
            <summary>
            Occurs when a node is in its Indexing phase
            </summary>
        </member>
        <member name="E:Examine.Providers.BaseIndexProvider.NodeIndexed">
            <summary>
            Occurs when a node is in its Indexed phase
            </summary>
        </member>
        <member name="E:Examine.Providers.BaseIndexProvider.NodesIndexing">
            <summary>
            Occurs when a collection of nodes are in their Indexing phase (before a single node is processed)
            </summary>
        </member>
        <member name="E:Examine.Providers.BaseIndexProvider.NodesIndexed">
            <summary>
            Occurs when the collection of nodes have been indexed
            </summary>
        </member>
        <member name="E:Examine.Providers.BaseIndexProvider.GatheringNodeData">
            <summary>
            Occurs when the indexer is gathering the fields and their associated data for the index
            </summary>
        </member>
        <member name="E:Examine.Providers.BaseIndexProvider.IndexDeleted">
            <summary>
            Occurs when a node is deleted from the index
            </summary>
        </member>
        <member name="E:Examine.Providers.BaseIndexProvider.GatheringFieldData">
            <summary>
            Occurs when a particular field is having its data obtained
            </summary>
        </member>
        <member name="E:Examine.Providers.BaseIndexProvider.IgnoringNode">
            <summary>
            Occurs when node is found but outside the supported node set
            </summary>
        </member>
        <member name="T:Examine.Config.IndexProvidersSection">
            <summary>
            Config section for the Examine Index Providers
            </summary>
        </member>
        <member name="P:Examine.Config.IndexProvidersSection.Providers">
            <summary>
            Gets the indexing providers.
            </summary>
            <value>The providers.</value>
        </member>
        <member name="P:Examine.Config.IndexProvidersSection.EnableDefaultEventHandler">
            <summary>
            If true, the IndexingActionHandler will be run to keep the default index up to date.
            </summary>
        </member>
        <member name="T:Examine.Config.SearchProvidersSection">
            <summary>
            Config section for the Examine search providers
            </summary>
        </member>
        <member name="P:Examine.Config.SearchProvidersSection.Providers">
            <summary>
            Gets the search providers.
            </summary>
            <value>The providers.</value>
        </member>
        <member name="P:Examine.Config.SearchProvidersSection.DefaultProvider">
            <summary>
            Gets or sets the default provider.
            </summary>
            <value>The default provider.</value>
        </member>
        <member name="T:Examine.IndexCriteria">
            <summary>
            a data structure for storing indexing/searching instructions
            </summary>
        </member>
        <member name="P:Examine.SearchCriteria.ISearchCriteria.MaxResults">
            <summary>
            Specifies the number of results to return
            </summary>
        </member>
        <member name="P:Examine.SearchCriteria.ISearchCriteria.IncludeHitCount">
            <summary>
            If <c>true</c> the total number of matches (hits) will be calculated
            </summary>
        </member>
        <member name="P:Examine.SearchCriteria.ISearchCriteria.TotalHits">
            <summary>
            Number of matches (hits) from this search criteria
            </summary>
        </member>
        <member name="P:Examine.SearchCriteria.ISearchCriteria.SearchIndexType">
            <summary>
            Indicates the type of data to search on
            </summary>
        </member>
        <member name="T:Examine.Config.ExamineSettings">
            <summary>
            Config section for Examine
            </summary>
        </member>
        <member name="P:Examine.Config.ExamineSettings.Instance">
            <summary>
            Gets the instance of the Examine settings.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:Examine.Config.ExamineSettings.SearchProviders">
            <summary>
            Gets the search providers.
            </summary>
            <value>The search providers.</value>
        </member>
        <member name="P:Examine.Config.ExamineSettings.IndexProviders">
            <summary>
            Gets the index providers.
            </summary>
            <value>The index providers.</value>
        </member>
    </members>
</doc>
